// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(LeaveDbContext))]
    partial class LeaveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Server.Models.Account", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_time");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<int>("Otp")
                        .HasColumnType("int")
                        .HasColumnName("otp");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilPictureUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profil_picture");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_accounts");
                });

            modelBuilder.Entity("Server.Models.AccountRole", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid>("AccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("RoleGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_role");

                    b.HasKey("Guid");

                    b.HasIndex("AccountGuid");

                    b.HasIndex("RoleGuid");

                    b.ToTable("tb_tr_account_roles");
                });

            modelBuilder.Entity("Server.Models.Department", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_departments");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("b41e4d54-2ffe-4619-53c8-08dba0d4ed05"),
                            Code = "SALES",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4622),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4622),
                            Name = "Sales"
                        },
                        new
                        {
                            Guid = new Guid("51d55a47-1cab-42e6-53c9-08dba0d4ed05"),
                            Code = "MARKETING",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4625),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4625),
                            Name = "Marketing"
                        },
                        new
                        {
                            Guid = new Guid("1fcc1546-78e3-4baf-53ca-08dba0d4ed05"),
                            Code = "FINANCE",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4627),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4628),
                            Name = "Finance"
                        },
                        new
                        {
                            Guid = new Guid("e707fb58-cdb1-4c2a-53cb-08dba0d4ed05"),
                            Code = "HR",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4630),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4630),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Guid = new Guid("02988287-198d-4dab-53cc-08dba0d4ed05"),
                            Code = "RND",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4632),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4632),
                            Name = "Research and Development"
                        },
                        new
                        {
                            Guid = new Guid("8ccd5722-3f93-484d-53cd-08dba0d4ed05"),
                            Code = "IT",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4634),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4635),
                            Name = "Information Technology"
                        },
                        new
                        {
                            Guid = new Guid("9b3c7c65-c99a-4e97-53ce-08dba0d4ed05"),
                            Code = "OPS",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4637),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4637),
                            Name = "Operations"
                        },
                        new
                        {
                            Guid = new Guid("1e4f0537-3ca0-4d64-53cf-08dba0d4ed05"),
                            Code = "CS",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4639),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4639),
                            Name = "Customer Service"
                        },
                        new
                        {
                            Guid = new Guid("bb4e21b9-f8ac-40ad-53d0-08dba0d4ed05"),
                            Code = "PROD",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4642),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4642),
                            Name = "Production"
                        },
                        new
                        {
                            Guid = new Guid("5eac3979-fc26-4017-53d1-08dba0d4ed05"),
                            Code = "QA",
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4644),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4645),
                            Name = "Quality Assurance"
                        });
                });

            modelBuilder.Entity("Server.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DepartmentGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_guid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hiring_date");

                    b.Property<DateTime>("LastLeaveUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<int>("LeaveRemain")
                        .HasColumnType("int")
                        .HasColumnName("leave_remain");

                    b.Property<Guid?>("ManagerGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manager_guid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Nik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nik");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.HasKey("Guid");

                    b.HasIndex("DepartmentGuid");

                    b.HasIndex("ManagerGuid");

                    b.ToTable("tb_m_employees");
                });

            modelBuilder.Entity("Server.Models.Feedback", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<Guid>("LeaveRequestGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("leave_request");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.HasKey("Guid");

                    b.HasIndex("LeaveRequestGuid")
                        .IsUnique();

                    b.ToTable("tb_m_feedback");
                });

            modelBuilder.Entity("Server.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_guid");

                    b.Property<DateTime>("LeaveEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("leave_end");

                    b.Property<DateTime>("LeaveStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("leave_start");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int")
                        .HasColumnName("leave_type");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("tb_m_leave_requests");
                });

            modelBuilder.Entity("Server.Models.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_roles");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("36350d33-42d7-4c63-a244-29b0a8d13bce"),
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4475),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4477),
                            Name = "admin"
                        },
                        new
                        {
                            Guid = new Guid("4887ec13-b482-47b3-9b24-08db91a71770"),
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4480),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4480),
                            Name = "employee"
                        },
                        new
                        {
                            Guid = new Guid("a7e15d29-9c74-4e72-ae63-5a47d69b27d6"),
                            CreatedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4485),
                            ModifiedDate = new DateTime(2023, 8, 23, 11, 38, 44, 428, DateTimeKind.Utc).AddTicks(4485),
                            Name = "manager"
                        });
                });

            modelBuilder.Entity("Server.Models.Account", b =>
                {
                    b.HasOne("Server.Models.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("Server.Models.Account", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Models.AccountRole", b =>
                {
                    b.HasOne("Server.Models.Account", "Account")
                        .WithMany("AccountRole")
                        .HasForeignKey("AccountGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Role", "Role")
                        .WithMany("AccountRole")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Server.Models.Employee", b =>
                {
                    b.HasOne("Server.Models.Department", "Department")
                        .WithMany("Employee")
                        .HasForeignKey("DepartmentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerGuid");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Server.Models.Feedback", b =>
                {
                    b.HasOne("Server.Models.LeaveRequest", "LeaveRequest")
                        .WithOne("Feedback")
                        .HasForeignKey("Server.Models.Feedback", "LeaveRequestGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("Server.Models.LeaveRequest", b =>
                {
                    b.HasOne("Server.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Models.Account", b =>
                {
                    b.Navigation("AccountRole");
                });

            modelBuilder.Entity("Server.Models.Department", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Server.Models.Employee", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("Server.Models.LeaveRequest", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Role", b =>
                {
                    b.Navigation("AccountRole");
                });
#pragma warning restore 612, 618
        }
    }
}
